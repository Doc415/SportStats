@page "/gamesession"
@rendermode InteractiveServer
@using Blazor_ApexCharts
@inject TeamService _teamService
@inject PlayerService _playerService
@inject StatService _statService
@inject GameService _gameService
@inject NavigationManager navManager

<h3>Select Team</h3>

<FluentSelect TOption="Team"
              Items="@Teams"
              Id="team-listbox"
              Disabled="@GameStarted"
              OptionValue="@(p => p.Id.ToString())"
              OptionText="@(p => p.Name)"
              @bind-SelectedOption="@tempTeam"
              @onchange="OnSelectedTeamChanged"/>
<FluentTextField Label="Opponent"Immediate="true" @bind-Value="Opponent"></FluentTextField>

@if (!GameStarted)
{
    <FluentButton Type="ButtonType.Button" OnClick="StartSession"> Start Game Session</FluentButton>
}
else
{
    <FluentButton Type="ButtonType.Button" OnClick="EndSession"> End Game Session</FluentButton>
}


@if(GameStarted)
{
<FluentStack Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Horizontal" HorizontalGap="30">
    <div Style="width:600px;height:385px;background-image:url('court.jpg'); background-size:contain">

        <FluentStack Orientation=" Microsoft.FluentUI.AspNetCore.Components.Orientation.Horizontal" HorizontalGap="1" Width="600">
            <FluentButton Id="A1" Type="ButtonType.Button" Appearance="Appearance.Outline" Style="width:199px;height:125px;" BackgroundColor="transparent" @onclick=@(()=>SelectLocation("A1"))></FluentButton>
            <FluentButton Id="B1" Type="ButtonType.Button" Appearance="Appearance.Outline" Style="width:199px;height:125px;" BackgroundColor="transparent" @onclick=@(()=>SelectLocation("B1"))></FluentButton>
            <FluentButton Id="C1" Type="ButtonType.Button" Appearance="Appearance.Outline" Style="width:199px;height:125px;" BackgroundColor="transparent" @onclick=@(()=>SelectLocation("C1"))></FluentButton>
        </FluentStack>

        <FluentStack Orientation=" Microsoft.FluentUI.AspNetCore.Components.Orientation.Horizontal" HorizontalGap="1" Width="600">
            <FluentButton Id="A2" Type="ButtonType.Button" Appearance="Appearance.Outline" Style="width:199px;height:120px;" BackgroundColor="transparent" @onclick=@(()=>SelectLocation("A2"))></FluentButton>
            <FluentButton Id="B2" Type="ButtonType.Button" Appearance="Appearance.Outline" Style="width:199px;height:120px;" BackgroundColor="transparent" @onclick=@(()=>SelectLocation("B2"))></FluentButton>
            <FluentButton Id="C2" Type="ButtonType.Button" Appearance="Appearance.Outline" Style="width:199px;height:120px;" BackgroundColor="transparent" @onclick=@(()=>SelectLocation("C2"))></FluentButton>
        </FluentStack>

        <FluentStack Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Horizontal" HorizontalGap="1" Width="600">
            <FluentButton Id="A3" Type="ButtonType.Button" Appearance="Appearance.Outline" Style="width:199px;height:120px;" BackgroundColor="transparent" @onclick=@(()=>SelectLocation("A3"))></FluentButton>
            <FluentButton Id="B3" Type="ButtonType.Button" Appearance="Appearance.Outline" Style="width:199px;height:120px;" BackgroundColor="transparent" @onclick=@(()=>SelectLocation("B3"))></FluentButton>
            <FluentButton Id="C3" Type="ButtonType.Button" Appearance="Appearance.Outline" Style="width:199px;height:120px;" BackgroundColor="transparent" @onclick=@(()=>SelectLocation("C3"))></FluentButton>
        </FluentStack>
              
    </div>
        
   <div>
            @if (locationSelected)
            {
                <FluentStack Id="playerselection">
                    <FluentListbox TOption="Player"
                                   Label="Select player"
                                   Items="@IngamePlayers"
                                   Id="player-listbox"
                                   Height="385px"
                                   Width="200px"
                                   Multiple="false"
                                   OptionValue="@(p => p.Id.ToString())"
                                   OptionText="@(p => p.Surname + " " + p.Name)"
                                   ValueChanged="PlayerChanged"
                                   @bind-SelectedOption="tempPlayer">
                        <OptionTemplate>
                            <FluentIcon Icon="Icons.Regular.Size16.Person" Slot="end" OnClick="@(() =>Console.WriteLine($"Icon for {@context.Surname} selected"))" />
                            @context.Surname (@context.Name)
                        </OptionTemplate>
                    </FluentListbox>
                </FluentStack>
            }
        </div>

        @if (playerSelected)
        {
            <FluentStack Id="statselection">
                <FluentListbox TOption="string"
                       Label="Select stat"
                       Items="@StatList"
                       Id="stat-listbox"
                       Height="385px"
                       Width="200px"
                       OptionValue="@(p => p)"
                       OptionText="@(p => p)"
                       ValueChanged="StatChanged"
                       @bind-SelectedOption="tempStat"
                       >
               </FluentListbox>
           </FluentStack>
        
        }

        @if (statSelected)
        {
            <FluentStack>
                <FluentButton Type="ButtonType.Button" OnClick="HandleValidSubmit">Submit</FluentButton>
            </FluentStack>
        }
  </FluentStack>






  <ApexChart TItem="Player"
           Title="Stats"
           Width="300"
           Height="300">

    <ApexPointSeries TItem="Player"
                Items="players"
                Name="Block"
                XValue="@(e => e.Name)"
                OrderByDescending="e=>e.Y"
                SeriesType="SeriesType.Bar"/>

  
</ApexChart>
}

@code {
    JustifyContent Justification = JustifyContent.FlexStart;
    Game CurrentGame = new();
    Game NewGame = new();
    int Spacing = 3;
    bool open=true;
    string selectedLocation=string.Empty;
    List<Player>? IngamePlayers=new();
    string SelectedPlayerId = string.Empty;
    List<string> StatList = new List<string> { "Pass", "Interception", "Shot", "Rebound", "Block" };
    string SelectedStat = string.Empty;
    private string status = "";
    List<Player> players = new();
    List<Team> Teams = new();
    Team selectedTeam = new() { Players = new() };
    bool locationSelected = false;
    bool playerSelected = false;
    Team tempTeam = new();
    string tempTeamId=string.Empty;
    bool GameStarted = false;
    Player tempPlayer = new();
    Player selectedPlayer = new();
    bool playerFirstLoad = true;
    bool statFirstLoad = true;
    bool statSelected = false;
    string tempStat = string.Empty;
    string Opponent=string.Empty;

    private void PlayerChanged()
    {
        if(playerFirstLoad){
            playerFirstLoad = !playerFirstLoad;
            return;
        }
        selectedPlayer = tempPlayer;
        playerSelected = true;
    }

    private void StatChanged()
    {
        if (statFirstLoad)
        {
            statFirstLoad = !statFirstLoad;
            return;
        }
        SelectedStat=tempStat;
        statSelected = true;
    }

    protected override async Task OnInitializedAsync()
    {
        Teams = await _teamService.GetTeams();
        selectedTeam = null;
    }



    private void OnSelectedTeamChanged(ChangeEventArgs e)
    {
        tempTeamId = e.Value.ToString();
        selectedTeam = Teams.FirstOrDefault(t => t.Id.ToString() == tempTeamId);
        if (selectedTeam != null)
        {
            IngamePlayers = selectedTeam.Players;
        }
    }

    void SelectLocation(string location)
    {
        selectedLocation = location;
        locationSelected = true;
    }

    private async void StartSession()
    {
        if (selectedTeam != null && !string.IsNullOrEmpty(Opponent))
        {
            NewGame.DateTime = DateTime.Now;
            NewGame.PlayedAgainst = Opponent;
            NewGame.OwnTeam = selectedTeam;
            CurrentGame=await _gameService.AddGame(NewGame);

            GameStarted = true;
            StateHasChanged();
        }

    }

    private async void EndSession()
    {
        CurrentGame = null;
        navManager.NavigateTo("/", true);
    }

    private async void HandleValidSubmit()
    {
        BaseStat newStat;
        switch (SelectedStat)
        {
            case "Pass":
                {
                    newStat = new Pass();
                }
                break;
            case "Shot":
                {
                    newStat = new Shot();
                }
                break;
            case "Interception":
                {
                    newStat = new Interception();
                }
                break;
            case "Rebound":
                {
                    newStat = new Rebound();
                }
                break;
            case "Block":
                {
                    newStat = new Block();
                }
                break;
            default:
                return;
                break;
        }
        newStat.BelongsTo = selectedPlayer;
        newStat.Location = selectedLocation;
        newStat.InGame = CurrentGame;
        //buraya stat.InGame=selectedGame eklenecek, selected game basta db kaydedilip tekrar id si ile alınacak
        await _statService.AddStat(newStat);

        ResetFlags();
    }

    private void ResetFlags()
    {
        locationSelected = false;
        playerSelected = false;
        statSelected = false;
        selectedLocation = string.Empty;
        selectedPlayer = null;
        SelectedStat = null;
        playerFirstLoad = true;
        statFirstLoad = true;
        StateHasChanged();
    }

 
 }
