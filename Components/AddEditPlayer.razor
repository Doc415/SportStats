@inject IPlayerRepository _playerrepository;
@inject ITeamRepository _teamrepository;
@inject NavigationManager navManager;

<br/>
<FluentHeader Style="width:100%">
    @Header
</FluentHeader>

<FluentEditForm Model="InputPlayer" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <FluentValidationSummary />
    <FluentNumberField @bind-Value="InputPlayer.Id" hidden></FluentNumberField>
    <FluentTextField Label="Name" @bind-Value="InputPlayer.Name" Required></FluentTextField>
    <FluentTextField Label="Surname" @bind-Value="InputPlayer.Surname" Required></FluentTextField>
    <FluentDatePicker Label="Birth date" @bind-Value="InputPlayer.BirthDate" Required></FluentDatePicker>
    <FluentSelect TOption="Team"
              Label="Select team"
              Items="@TeamList"
              Id="team-listbox"
              Width="200px"
              Height="250px"
              OptionValue="@(p => p.Id.ToString())"
              OptionText="@(p => p.Name)"
              @bind-Value="@SelectedTeamId"
              @bind-SelectedOption="@SelectedTeam"/>
    <br/>
    <br/>

    <FluentButton Type="ButtonType.Submit">Submit</FluentButton>
</FluentEditForm>

@code {
    [Parameter]
    public Player? InputPlayer { get; set; }
    public bool editPlayer = false;
    public List<Team> TeamList = new();
    public string SelectedTeamId;
    public Team SelectedTeam;
    private string Header = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        if (InputPlayer == null)
        {
            InputPlayer = new Player();
            Header = "Add new player";
        }
        else
        {
            editPlayer = true;
            Header = "Edit player";
        }

        TeamList = await _teamrepository.GetTeams();
        TeamList.Insert(0, null);
    }

    public async Task HandleValidSubmit()
    {
        if (SelectedTeam!=null)
        {
           InputPlayer.IsInTeam = true;
        }
        InputPlayer.MemberOf = SelectedTeam;

        if (editPlayer)
            await _playerrepository.UpdatePlayer(InputPlayer);
        else
            await  _playerrepository.AddPlayer(InputPlayer);

        navManager.NavigateTo("/administration",true);
    }
    }
